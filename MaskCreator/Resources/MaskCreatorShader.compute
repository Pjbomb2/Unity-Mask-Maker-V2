Texture2D<float4> Input;
RWTexture2D<float4> Result;
SamplerState my_linear_clamp_sampler;
SamplerState my_point_clamp_sampler;
int screen_width;
int screen_height;
#pragma kernel ClearCol

int Channel;
[numthreads(32,32,1)]
void ClearCol (uint3 id : SV_DispatchThreadID)
{
    if(any(id.xy >= int2(screen_width, screen_height))) return;
    Result[id.xy] = float4(Channel.xxx,1);
}

#pragma kernel SelectCol
float2 SampledUV;
[numthreads(32,32,1)]
void SelectCol (uint3 id : SV_DispatchThreadID)
{
    if(any(id.xy >= int2(screen_width, screen_height))) return;
    Result[id.xy] = Input.SampleLevel(my_point_clamp_sampler, SampledUV, 0);
}


#pragma kernel MaskInit
inline float luminance(const float3 a) {return dot(float3(0.299f, 0.587f, 0.114f), a);}
float Sharpness;
bool Gradient;
Texture2D<float4> MaxCol;
Texture2D<float4> MinCol;
Texture2D<float4> BackgroundCol;
[numthreads(32,32,1)]
void MaskInit (uint3 id : SV_DispatchThreadID)
{
    if(any(id.xy >= int2(screen_width, screen_height))) return;
    float CurrentLum = Channel == 3 ? luminance(Input.SampleLevel(my_point_clamp_sampler, id.xy / float2(screen_width, screen_height), 0)) : Input.SampleLevel(my_point_clamp_sampler, id.xy / float2(screen_width, screen_height), 0)[Channel];
    float MaxLum = Channel == 3 ? luminance(MaxCol[int2(3,3)]) : MaxCol[int2(3,3)][Channel];
    float MinLum = Channel == 3 ? luminance(MinCol[int2(3,3)]) : MinCol[int2(3,3)][Channel];
    float BackgroundLum = Channel == 3 ? luminance(BackgroundCol[int2(3,3)]) : BackgroundCol[int2(3,3)][Channel];
    if(CurrentLum - MaxLum < Sharpness &&
        CurrentLum - MinLum >= -Sharpness &&
        abs(CurrentLum - BackgroundLum) > 0.005f) {
        if(Gradient) {
            float GradientCol = CurrentLum - MinLum;
            GradientCol /= (MaxLum - MinLum);
            Result[id.xy] = float4(GradientCol.xxx, 1);
        } else {
            Result[id.xy] = 1;
        }
    } else {
        Result[id.xy] = float4(0,0,0,1);
    }
}


#pragma kernel InvertKernel
[numthreads(32,32,1)]
void InvertKernel (uint3 id : SV_DispatchThreadID)
{
    if(any(id.xy >= int2(screen_width, screen_height))) return;

    float4 ResultInput = Result[id.xy];
    switch(Channel) {
        case 0: ResultInput[0] = 1.0f - ResultInput[0]; break;
        case 1: ResultInput[1] = 1.0f - ResultInput[1]; break;
        case 2: ResultInput[2] = 1.0f - ResultInput[2]; break;
        case 3: ResultInput.xyz = 1.0f - ResultInput.xyz; break;
    }
    Result[id.xy] = ResultInput;
}


#pragma kernel FillKernel
bool Invert;
StructuredBuffer<int2> WorkQueA;
RWStructuredBuffer<int2> WorkQueB;
RWStructuredBuffer<uint> QueCountBuffer;
RWStructuredBuffer<int> SeenBuffer;
[numthreads(1024,1,1)]
void FillKernel (uint3 id : SV_DispatchThreadID)
{
    if(id.x >= QueCountBuffer[0]) return;
    int2 CenterID = WorkQueA[id.x];
    for(int i = -1; i <= 1; i++) {
        for(int j = -1; j <= 1; j++) {
            if(i == 0 && j == 0) continue;
            int2 OffsetID = CenterID + int2(i, j);
            if(any(OffsetID >= int2(screen_width, screen_height) || OffsetID < 0)) continue;
            int StoredValue = 0;
            InterlockedExchange(SeenBuffer[OffsetID.x + OffsetID.y * screen_width], 0xFFFF, StoredValue);
            if(StoredValue == 0xFFFF) continue;
            if(abs(asfloat(QueCountBuffer[2]) - (Channel == 3 ? luminance(Result[OffsetID]) : Result[OffsetID][Channel])) > 0.05f) continue;

            InterlockedAdd(QueCountBuffer[1], 1, StoredValue);
            WorkQueB[StoredValue] = OffsetID;

            float4 ResultInput = Result[OffsetID];
            switch(Channel) {
                case 0: ResultInput.x = 1.0f - ResultInput.x; break;
                case 1: ResultInput.y = 1.0f - ResultInput.y; break;
                case 2: ResultInput.z = 1.0f - ResultInput.z; break;
                case 3: ResultInput.xyz = 1.0f - ResultInput.xyz; break;
            }
            Result[OffsetID] = ResultInput;
        }
    }

}

#pragma kernel FillTransferKernel
bool FirstPass;
[numthreads(1,1,1)]
void FillTransferKernel (uint3 id : SV_DispatchThreadID)
{
    if(FirstPass) QueCountBuffer[2] = asuint(Channel == 3 ? luminance(Result[WorkQueA[0]]) : Result[WorkQueA[0]][Channel]);
    QueCountBuffer[0] = QueCountBuffer[1];
    QueCountBuffer[1] = 0;
}

#pragma kernel OverlayKernel
bool Square;
bool Circle;
float ShapeSizeOuter;
bool Reverse;
[numthreads(32,32,1)]
void OverlayKernel (uint3 id : SV_DispatchThreadID)
{
    if(any(id.xy >= int2(screen_width, screen_height))) return;
    float2 uv = id.xy;// / float2(screen_width, screen_height);
    float4 ResultInput = Input[id.xy];
    float d;
    if(Square) {
        float2 w = abs(uv - SampledUV) - ShapeSizeOuter;
        float g = max(w.x, w.y);
        d = (g>0) ? length(max(w, 0)):g;
    } else {
        d = length(uv - SampledUV) - ShapeSizeOuter;
    }
    if(!Reverse) {
        if(d < 0) ResultInput = float4(lerp(ResultInput.xyz, float3(1,0,0), !Gradient ? 0.5f : saturate(abs(d) / ShapeSizeOuter)), 1);
    } else {
        if(d > 0) ResultInput = float4(lerp(ResultInput.xyz, float3(1,0,0), !Gradient ? 0.5f : (saturate(abs(d) / length(float2(screen_width, screen_height))))), 1);
    }
    Result[id.xy] = ResultInput;
}



#pragma kernel ClearKernel
[numthreads(32,32,1)]
void ClearKernel (uint3 id : SV_DispatchThreadID)
{
    if(any(id.xy >= int2(screen_width, screen_height))) return;
    float2 uv = id.xy;// / float2(screen_width, screen_height);
    float4 ResultInput = Result[id.xy];
    float d;
    if(Square) {
        float2 w = abs(uv - SampledUV) - ShapeSizeOuter;
        float g = max(w.x, w.y);
        d = (g>0) ? length(max(w, 0)):g;
    } else {
        d = length(uv - SampledUV) - ShapeSizeOuter;
    }
    if(!Reverse) {
        if(d < 0) {
            if(Channel == 3) {
                ResultInput = float4(lerp(ResultInput.xyz, Invert, !Gradient ? 1.0f : saturate(abs(d) / ShapeSizeOuter)), 1);
            } else {
                switch(Channel) {
                    case 0: ResultInput.x = lerp(ResultInput.x, Invert, !Gradient ? 1.0f : saturate(abs(d) / ShapeSizeOuter)); break;
                    case 1: ResultInput.y = lerp(ResultInput.y, Invert, !Gradient ? 1.0f : saturate(abs(d) / ShapeSizeOuter)); break;
                    case 2: ResultInput.z = lerp(ResultInput.z, Invert, !Gradient ? 1.0f : saturate(abs(d) / ShapeSizeOuter)); break;
                }
            }
        }
    } else {
        if(d > 0) {
            if(Channel == 3) {
                ResultInput = float4(lerp(ResultInput.xyz, Invert, !Gradient ? 1.0f : (saturate(abs(d) / length(float2(screen_width, screen_height))))), 1);
            } else {
                switch(Channel) {
                    case 0: ResultInput.x = lerp(ResultInput.x, Invert, !Gradient ? 1.0f : (saturate(abs(d) / length(float2(screen_width, screen_height))))); break;
                    case 1: ResultInput.y = lerp(ResultInput.y, Invert, !Gradient ? 1.0f : (saturate(abs(d) / length(float2(screen_width, screen_height))))); break;
                    case 2: ResultInput.z = lerp(ResultInput.z, Invert, !Gradient ? 1.0f : (saturate(abs(d) / length(float2(screen_width, screen_height))))); break;
                }
            }
        }
    }
    Result[id.xy] = ResultInput;
}



#pragma kernel CleanKernel
[numthreads(32,32,1)]
void CleanKernel (uint3 id : SV_DispatchThreadID)
{
    if(any(id.xy >= int2(screen_width, screen_height))) return;
    float4 ResultInput = Input[id.xy];
    float CenterLum = Channel == 3 ? luminance(ResultInput) : ResultInput[Channel];
    if(CenterLum > 0.01f) {
        int ValidNeighbors = 0;
        for(int i = -1; i <= 1; i++) {
            for(int j = -1; j <= 1; j++) {
                if(i == 0 && j == 0) continue;
                int2 OffsetID = id.xy + int2(i, j);
                if(any(OffsetID >= int2(screen_width, screen_height) || OffsetID < 0)) continue;
                if((Channel == 3 ? luminance(Input[OffsetID]) : Input[OffsetID][Channel]) > 0.5f * Sharpness) {
                    ValidNeighbors++;
                }
            }
        }
        if(ValidNeighbors <= 4) {
            switch(Channel) {
                case 0: ResultInput.x = 0; break;
                case 1: ResultInput.y = 0; break;
                case 2: ResultInput.z = 0; break;
                case 3: ResultInput.xyz = 0; break;
            }
        }
    }

    Result[id.xy] = ResultInput;
}

#pragma kernel DialateKernel
[numthreads(32,32,1)]
void DialateKernel (uint3 id : SV_DispatchThreadID)
{
    if(any(id.xy >= int2(screen_width, screen_height))) return;
    float4 ResultInput = Input[id.xy];
    float CenterLum = Channel == 3 ? luminance(ResultInput) : ResultInput[Channel];
    if(CenterLum < 0.01f) {
        for(int i = -1; i <= 1; i++) {
            for(int j = -1; j <= 1; j++) {
                if(i == 0 && j == 0) continue;
                int2 OffsetID = id.xy + int2(i, j);
                if(any(OffsetID >= int2(screen_width, screen_height) || OffsetID < 0)) continue;
                ResultInput = float4(max(ResultInput.xyz, Input[OffsetID].xyz), 1);
            }
        }
    }

    Result[id.xy] = ResultInput;
}

